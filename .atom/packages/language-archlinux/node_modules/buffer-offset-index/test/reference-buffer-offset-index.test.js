const assert = require('assert')
const ReferenceBufferOffsetIndex = require('./reference-buffer-offset-index')

describe('ReferenceBufferOffsetIndex', () => {
  it('maps character indices to 2d points and viceversa', () => {
    const bufferIndex = new ReferenceBufferOffsetIndex()
    bufferIndex.splice(0, 0, [1, 3, 5]) // a|bcd|efghi
    assert.deepEqual(bufferIndex.positionForCharacterIndex(0), {row: 0, column: 0})
    assert.equal(bufferIndex.characterIndexForPosition({row: 0, column: 0}), 0)
    assert.deepEqual(bufferIndex.positionForCharacterIndex(1), {row: 1, column: 0})
    assert.equal(bufferIndex.characterIndexForPosition({row: 1, column: 0}), 1)
    assert.deepEqual(bufferIndex.positionForCharacterIndex(2), {row: 1, column: 1})
    assert.equal(bufferIndex.characterIndexForPosition({row: 1, column: 1}), 2)
    assert.deepEqual(bufferIndex.positionForCharacterIndex(4), {row: 2, column: 0})
    assert.equal(bufferIndex.characterIndexForPosition({row: 2, column: 0}), 4)
    assert.deepEqual(bufferIndex.positionForCharacterIndex(7), {row: 2, column: 3})
    assert.equal(bufferIndex.characterIndexForPosition({row: 2, column: 3}), 7)
    assert.deepEqual(bufferIndex.positionForCharacterIndex(8), {row: 2, column: 4})
    assert.equal(bufferIndex.characterIndexForPosition({row: 2, column: 4}), 8)
    assert.deepEqual(bufferIndex.positionForCharacterIndex(Infinity), {row: 2, column: 5})
    assert.equal(bufferIndex.characterIndexForPosition({row: 2, column: 5}), 9)
    assert.equal(bufferIndex.characterIndexForPosition({row: 2, column: 6}), 9)
    assert.equal(bufferIndex.characterIndexForPosition({row: 2, column: Infinity}), 9)
    assert.equal(bufferIndex.characterIndexForPosition({row: Infinity, column: Infinity}), 9)

    bufferIndex.splice(0, 2, [5, 1, 4]) // abcde|f|ghij|klmno
    assert.deepEqual(bufferIndex.positionForCharacterIndex(0), {row: 0, column: 0})
    assert.equal(bufferIndex.characterIndexForPosition({row: 0, column: 0}), 0)
    assert.deepEqual(bufferIndex.positionForCharacterIndex(1), {row: 0, column: 1})
    assert.equal(bufferIndex.characterIndexForPosition({row: 0, column: 1}), 1)
    assert.deepEqual(bufferIndex.positionForCharacterIndex(5), {row: 1, column: 0})
    assert.equal(bufferIndex.characterIndexForPosition({row: 1, column: 0}), 5)
    assert.deepEqual(bufferIndex.positionForCharacterIndex(6), {row: 2, column: 0})
    assert.equal(bufferIndex.characterIndexForPosition({row: 2, column: 0}), 6)
    assert.deepEqual(bufferIndex.positionForCharacterIndex(7), {row: 2, column: 1})
    assert.equal(bufferIndex.characterIndexForPosition({row: 2, column: 1}), 7)
    assert.deepEqual(bufferIndex.positionForCharacterIndex(10), {row: 3, column: 0})
    assert.equal(bufferIndex.characterIndexForPosition({row: 3, column: 0}), 10)
    assert.deepEqual(bufferIndex.positionForCharacterIndex(13), {row: 3, column: 3})
    assert.equal(bufferIndex.characterIndexForPosition({row: 3, column: 3}), 13)
    assert.deepEqual(bufferIndex.positionForCharacterIndex(14), {row: 3, column: 4})
    assert.equal(bufferIndex.characterIndexForPosition({row: 3, column: 4}), 14)
    assert.deepEqual(bufferIndex.positionForCharacterIndex(Infinity), {row: 3, column: 5})
    assert.equal(bufferIndex.characterIndexForPosition({row: 3, column: 5}), 15)
    assert.equal(bufferIndex.characterIndexForPosition({row: 3, column: 6}), 15)
    assert.equal(bufferIndex.characterIndexForPosition({row: 3, column: Infinity}), 15)
    assert.equal(bufferIndex.characterIndexForPosition({row: Infinity, column: Infinity}), 15)
  })
})
