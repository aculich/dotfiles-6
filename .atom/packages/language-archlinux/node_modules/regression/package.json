{
  "_args": [
    [
      {
        "raw": "regression@^1.2.1",
        "scope": null,
        "escapedName": "regression",
        "name": "regression",
        "rawSpec": "^1.2.1",
        "spec": ">=1.2.1 <2.0.0",
        "type": "range"
      },
      "/tmp/apm-install-dir-117419-8053-1geqmqv.3697t7f1or/node_modules/language-archlinux/node_modules/text-buffer"
    ]
  ],
  "_from": "regression@>=1.2.1 <2.0.0",
  "_id": "regression@1.4.0",
  "_inCache": true,
  "_location": "/language-archlinux/regression",
  "_nodeVersion": "4.4.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/regression-1.4.0.tgz_1482094380144_0.8209839367773384"
  },
  "_npmUser": {
    "name": "tom-alexander",
    "email": "me@tomalexander.co.nz"
  },
  "_npmVersion": "2.14.20",
  "_phantomChildren": {},
  "_requested": {
    "raw": "regression@^1.2.1",
    "scope": null,
    "escapedName": "regression",
    "name": "regression",
    "rawSpec": "^1.2.1",
    "spec": ">=1.2.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/language-archlinux/text-buffer"
  ],
  "_resolved": "https://registry.npmjs.org/regression/-/regression-1.4.0.tgz",
  "_shasum": "d3468f9fbada1c70161df31f6c64301677ac5a70",
  "_shrinkwrap": null,
  "_spec": "regression@^1.2.1",
  "_where": "/tmp/apm-install-dir-117419-8053-1geqmqv.3697t7f1or/node_modules/language-archlinux/node_modules/text-buffer",
  "bugs": {
    "url": "https://github.com/Tom-Alexander/regression-js/issues"
  },
  "contributors": [
    {
      "name": "Tom Alexander",
      "email": "me@tomalexander.co.nz"
    },
    {
      "name": "Misha Wolfson",
      "email": "misha@ginkgobioworks.com"
    }
  ],
  "dependencies": {},
  "description": "Javascript least squares data fitting methods",
  "devDependencies": {
    "babel-eslint": "^7.1.1",
    "eslint": "^3.12.2",
    "eslint-config-airbnb-es5": "^1.1.0",
    "eslint-plugin-react": "^6.8.0",
    "grunt": "~0.4.1",
    "grunt-contrib-uglify": "~0.2.2",
    "grunt-eslint": "^19.0.0",
    "grunt-mocha-test": "^0.13.2",
    "mocha": "^3.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "d3468f9fbada1c70161df31f6c64301677ac5a70",
    "tarball": "https://registry.npmjs.org/regression/-/regression-1.4.0.tgz"
  },
  "gitHead": "0a97486bd5e3d7a648a1a3d59bf71441eedfda36",
  "homepage": "https://github.com/Tom-Alexander/regression-js#readme",
  "keywords": [
    "regression",
    "data",
    "fitting",
    "modelling",
    "analysis"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "tom-alexander",
      "email": "me@tomalexander.co.nz"
    }
  ],
  "name": "regression",
  "optionalDependencies": {},
  "readme": "regression.js\n=============\n\n[![Build Status](https://travis-ci.org/Tom-Alexander/regression-js.svg?branch=master)](https://travis-ci.org/Tom-Alexander/regression-js)\n\n_regression.js_ is a JavaScript library containing a collection of least-squares fitting methods for\nfinding a trend in a set of data. It currently contains methods for linear, exponential,\nlogarithmic, power and polynomial trends.\n\nInstallation\n============\n\nThe library can be installed from both `bower` and `npm`.\n\nUsage\n=====\n\nMost regressions require only two parameters - the regression method (linear, exponential,\nlogarithmic, power or polynomial) and a data source. A third parameter can be used to define the\ndegree of a polynomial when a polynomial regression is required. The regression method name is\ncase-insensitive.\n\nAll models return an object with the following properties:\n- `equation`: an array containing the coefficients of the equation\n- `string`: A string representation of the equation\n- `points`: an array containing the predicted data\n- `r2`: the coefficient of determination (<i>R</i><sup>2</sup>)\n\n\nRegression Types\n================\n\nLinear regression\n-----------------\n\nequation: `[gradient, y-intercept]` in the form y = mx + c\n\n```javascript\nvar data = [[0,1],[32, 67] .... [12, 79]];\nvar result = regression('linear', data);\nvar slope = result.equation[0];\nvar yIntercept = result.equation[1];\n```\n\nLinear regression through the origin\n-----------------\n\nequation: `[gradient]` in the form ![y = mx](http://mathurl.com/h5m4qgd.png)\n\n```javascript\nvar data = [[0,1],[32, 67] .... [12, 79]];\nvar result = regression('linearThroughOrigin', data);\n```\n\nExponential regression\n----------------------\n\nequation: `[a, b]` in the form ![y = ae^bx](http://mathurl.com/zuys53z.png)\n\nLogarithmic regression\n----------------------\n\nequation: `[a, b]` in the form ![y = a + b ln x](http://mathurl.com/zye394m.png)\n\nPower law regression\n--------------------\n\nequation: `[a, b]` in the form ![y = ax^b](http://mathurl.com/gojkazs.png)\n\nPolynomial regression\n---------------------\n\nequation: `[a0, ... , an]` in the form ![anx^n ... + a1x + a0](http://mathurl.com/hxz543o.png)\n\n```javascript\nvar data = [[0,1],[32, 67] .... [12, 79]];\nvar result = regression('polynomial', data, 4);\n```\n\nLastvalue\n---------\n\nNot exactly a regression. Uses the last value to fill the blanks when forecasting.\n\nFilling the blanks and forecasting\n----------------------------------\n\n```javascript\nvar data = [[0,1], [32, null] .... [12, 79]];\n```\n\nIn any regression, if you use a `null` value for data, regression-js will fill it using the trend.\n\nDevelopment\n===========\n\nInstall packages: `npm install`\n\nThe project is built and controlled with [grunt](http://gruntjs.com).\n\nTo prepare for release, run the default task, which:\n- Lints the source and tests with ESLint\n- Minifies the javascript in to the `build/` directory\n\nTo run tests, `grunt test`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Tom-Alexander/regression-js.git"
  },
  "scripts": {
    "build": "grunt",
    "test": "grunt test"
  },
  "version": "1.4.0"
}
