what depends on parser?
interfaces depends on parser

what depends on interfaces?
client and server

what depends on client?
the cli

what depends on server?
the cli
interfaces (circular, for types...)
utils tests

what depends on utils
interfaces does (but many of them are just depending on Range)
so if we move that into parser, interfaces will depend on parser (which it already does)


what happens if we duplicate flow types in each package?
will it complain because they are dupes?
will it complain if they get out of sync?
i think i can make a local-only type that ends up working just fine

# Plan

Interfaces depends on parser

0. [DONE] Declare Range and Position in Types as interfaces.
1. [DONE] Make Range declare implements. Now Range will depend on Types (previously
   depended on nothing).
2. [DONE] Make CharacterStream an interface in Types.
3. [DONE] Now Types doesn't depend on Parser. Extract types into separate package!
4. [DONE] Extract parser.
5. Extract config.
6. Extract utils? (would also be nice to put build/dist tools in here maybe?)
  problem: utils tests depend on server (this might be the easiest dep to break, make a mock)
  server depends on utils and interfaces





  dependency graph:

    types - no deps
    config - types
    utils - types
    parser - types
    interfaces - types, utils, parser
    server - config, interface, types, utils

