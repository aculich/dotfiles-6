{
  "_args": [
    [
      {
        "raw": "graphql-language-service@0.0.22",
        "scope": null,
        "escapedName": "graphql-language-service",
        "name": "graphql-language-service",
        "rawSpec": "0.0.22",
        "spec": "0.0.22",
        "type": "version"
      },
      "/tmp/d-11752-31056-45xr0q.qqtg6fajor/package.tgz"
    ]
  ],
  "_from": "graphql-language-service@0.0.22",
  "_id": "graphql-language-service@0.0.22",
  "_inCache": true,
  "_location": "/nuclide/graphql-language-service",
  "_nodeVersion": "7.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/graphql-language-service-0.0.22.tgz_1495842588510_0.03821471403352916"
  },
  "_npmUser": {
    "name": "wincent",
    "email": "greg@hurrell.net"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "graphql-language-service@0.0.22",
    "scope": null,
    "escapedName": "graphql-language-service",
    "name": "graphql-language-service",
    "rawSpec": "0.0.22",
    "spec": "0.0.22",
    "type": "version"
  },
  "_requiredBy": [
    "/nuclide"
  ],
  "_resolved": "https://registry.npmjs.org/graphql-language-service/-/graphql-language-service-0.0.22.tgz",
  "_shasum": "fe3c5583b9ab2c49f37cd271e9e3ee6aab9c3978",
  "_shrinkwrap": null,
  "_spec": "graphql-language-service@0.0.22",
  "_where": "/tmp/d-11752-31056-45xr0q.qqtg6fajor/package.tgz",
  "bin": {
    "graphql": "./bin/graphql.js"
  },
  "bugs": {
    "url": "https://github.com/graphql/graphql-language-service/issues"
  },
  "contributors": [
    {
      "name": "Hyohyeon Jeong",
      "email": "asiandrummer@fb.com"
    },
    {
      "name": "Lee Byron",
      "email": "lee@leebyron.com",
      "url": "http://leebyron.com/"
    }
  ],
  "dependencies": {
    "babel-polyfill": "6.16.0",
    "fb-watchman": "^2.0.0",
    "graphql": "^0.10.1",
    "graphql-language-service-config": "0.0.14",
    "graphql-language-service-interface": "0.0.15",
    "graphql-language-service-parser": "0.0.13",
    "graphql-language-service-server": "0.0.21",
    "graphql-language-service-types": "0.0.19",
    "graphql-language-service-utils": "0.0.14",
    "nullthrows": "^1.0.0",
    "vscode-jsonrpc": "^3.2.0",
    "vscode-languageserver": "^3.2.0",
    "yargs": "^3.32.0 || ^7.0.0"
  },
  "description": "An interface for building GraphQL language services for IDEs",
  "devDependencies": {
    "babel-cli": "6.23.0",
    "babel-eslint": "7.2.0",
    "babel-plugin-check-es2015-constants": "6.22.0",
    "babel-plugin-syntax-async-functions": "6.13.0",
    "babel-plugin-transform-class-properties": "6.23.0",
    "babel-plugin-transform-es2015-arrow-functions": "6.22.0",
    "babel-plugin-transform-es2015-block-scoped-functions": "6.22.0",
    "babel-plugin-transform-es2015-block-scoping": "6.23.0",
    "babel-plugin-transform-es2015-classes": "6.23.0",
    "babel-plugin-transform-es2015-computed-properties": "6.22.0",
    "babel-plugin-transform-es2015-destructuring": "6.22.0",
    "babel-plugin-transform-es2015-duplicate-keys": "6.22.0",
    "babel-plugin-transform-es2015-function-name": "6.22.0",
    "babel-plugin-transform-es2015-literals": "6.22.0",
    "babel-plugin-transform-es2015-modules-commonjs": "6.23.0",
    "babel-plugin-transform-es2015-object-super": "6.22.0",
    "babel-plugin-transform-es2015-parameters": "6.23.0",
    "babel-plugin-transform-es2015-shorthand-properties": "6.22.0",
    "babel-plugin-transform-es2015-spread": "6.22.0",
    "babel-plugin-transform-es2015-template-literals": "6.22.0",
    "babel-plugin-transform-flow-strip-types": "6.22.0",
    "babel-plugin-transform-object-rest-spread": "6.22.0",
    "babel-plugin-transform-regenerator": "6.22.0",
    "babel-types": "6.22.0",
    "chai": "3.5.0",
    "eslint": "3.15.0",
    "eslint-plugin-babel": "4.1.0",
    "eslint-plugin-dependencies": "2.3.0",
    "eslint-plugin-flowtype": "2.30.4",
    "eslint-plugin-prefer-object-spread": "1.2.1",
    "flow-bin": "0.47.0",
    "mocha": "3.2.0",
    "prettier": "^0.22.0"
  },
  "directories": {},
  "dist": {
    "shasum": "fe3c5583b9ab2c49f37cd271e9e3ee6aab9c3978",
    "tarball": "https://registry.npmjs.org/graphql-language-service/-/graphql-language-service-0.0.22.tgz"
  },
  "gitHead": "77ffd1401fe7babc14471b7c9db603fe359292fa",
  "homepage": "https://github.com/graphql/graphql-language-service#readme",
  "keywords": [
    "graphql"
  ],
  "maintainers": [
    {
      "name": "asiandrummer",
      "email": "asiandrummer@gmail.com"
    },
    {
      "name": "fb",
      "email": "opensource+npm@fb.com"
    },
    {
      "name": "leebyron",
      "email": "lee@leebyron.com"
    },
    {
      "name": "wincent",
      "email": "greg@hurrell.net"
    }
  ],
  "name": "graphql-language-service",
  "optionalDependencies": {},
  "options": {
    "mocha": "--full-trace --require resources/mochaBootload packages/*/src/**/__tests__/**/*-test.js src/**/__tests__/**/*-test.js",
    "mocha_tdd": "--full-trace --watch --require resources/mochaBootload packages/*/src/**/__tests__/**/*-test.js src/**/__tests__/**/*-test.js"
  },
  "peerDependencies": {
    "graphql": "^0.6.0 || ^0.7.0 || ^0.8.0-b || ^0.9.0 || ^0.10.0"
  },
  "readme": "# GraphQL Language Service\n\n_This is currently in technical preview. We welcome your feedback and suggestions._\n\n[![Build Status](https://travis-ci.org/graphql/graphql-language-service.svg?branch=master)](https://travis-ci.org/graphql/graphql-language-service)\n\nGraphQL Language Service provides an interface for building GraphQL language services for IDEs.\n\nPartial support for [Microsoft's Language Server Protocol](https://github.com/Microsoft/language-server-protocol) is in place, with more to come in the future.\n\nCurrently supported features include:\n- Diagnostics (GraphQL syntax linting/validations) (**spec-compliant**)\n- Autocomplete suggestions (**spec-compliant**)\n- Hyperlink to fragment definitions (**spec-compliant**)\n- Outline view support for queries\n\n\n## Installation and Usage\n\n### Dependencies\n\nGraphQL Language Service depends on [Watchman](https://facebook.github.io/watchman/) running on your machine. Follow [this installation guide](https://facebook.github.io/watchman/docs/install.html) to install Watchman.\n\n### Installation\n\n```\ngit clone git@github.com:graphql/graphql-language-service.git\ncd {path/to/your/repo}\nnpm install ../graphql-language-service\n```\n\nAfter pulling the latest changes from this repo, be sure to run `npm run build` to transform the `src/` directory and generate the `dist/` directory.\n\nThe library includes a node executable file which you can find in `./node_modules/.bin/graphql.js` after installation.\n\n### GraphQL configuration file (`.graphqlrc`)\n\nGraphQL Language Service, to provide its full feature set, will need to know some information about your GraphQL development environment. `.graphqlrc` is a GraphQL configuration file that contains this information.\n```\n{\n  \"build-configs\": {\n    \"product-name\": {\n      \"input-dirs\": [\n        \"/dir/paths/to/your/graphql/files\"\n      ],\n      \"exclude-dirs\": [\n        \"/dir/paths/to/ignore/\"\n      ],\n      \"schema-path\": \"/path/to/the/schema/\" // supports `.graphql` IDL or `.json` file\n    }\n  }\n}\n```\n`.graphqlrc` can define mutliple configurations for each GraphQL environment, should you have more than one.\n\nThe GraphQL configurations will be used to perform two things in a nutshell:\n\n1. Using `input-dirs` and `exclude-dirs`, cache all fragment definitions per each product. This information will be used to compute dependencies between GraphQL queries and fragments.\n2. Using `schema-path`, build and cache `GraphQLSchema`s (per product). The schema will be used to perform query validations, autocomplete suggestions etc.\n\nAlso, if GraphQL Language Service receives an RPC message that contains the path of the file being operated on, `input-dirs` and `exclude-dirs` are used to determine which product configuration the file is associated with. Refer to [GraphQLConfig class](https://github.com/graphql/graphql-language-service/blob/master/packages/graphql-language-service-config/src/index.js) for more information.\n\n### Using the command-line interface\n\nThe node executable contains several commands: `server` and a command-line language service methods (`lint`, `autocomplete`, `outline`).\n\nImproving this list is a work-in-progress.\n\n```\nGraphQL Language Service Command-Line Interface.\nUsage: bin/graphql.js <command> <file>\n    [-h | --help]\n    [-c | --configDir] {configDir}\n    [-t | --text] {textBuffer}\n    [-f | --file] {filePath}\n    [-s | --schema] {schemaPath}\n\n\nOptions:\n  -h, --help        Show help                                          [boolean]\n  -t, --text        Text buffer to perform GraphQL diagnostics on.\n                    Will defer to --file option if omitted.\n                    Overrides the --file option, if any.\n                                                                        [string]\n  -f, --file        File path to perform GraphQL diagnostics on.\n                    Will be ignored if --text option is supplied.\n                                                                        [string]\n  --row             A row number from the cursor location for GraphQL\n                    autocomplete suggestions.\n                    If omitted, the last row number will be used.\n                                                                        [number]\n  --column          A column number from the cursor location for GraphQL\n                    autocomplete suggestions.\n                    If omitted, the last column number will be used.\n                                                                        [number]\n  -c, --configDir   Path to the .graphqlrc configuration file.\n                    Walks up the directory tree from the provided config\n                    directory, or the current working directory, until a\n                    .graphqlrc is found or the root directory is found.\n                                                                        [string]\n  -s, --schemaPath  a path to schema DSL file\n                                                                        [string]\n\nAt least one command is required.\nCommands: \"server, validate, autocomplete, outline\"\n```\n\n## Architectural Overview\n\nGraphQL Language Service currently communicates via Stream transport with the IDE server. GraphQL server will receive/send RPC messages to perform language service features, while caching the necessary GraphQL artifacts such as fragment definitions, GraphQL schemas etc. More about the server interface and RPC message format below.\n\nThe IDE server should launch a separate GraphQL server with its own child process for each `.graphqlrc` file the IDE finds (using the nearest ancestor directory relative to the file currently being edited):\n```\n./application\n\n  ./productA\n    .graphqlrc\n    ProductAQuery.graphql\n    ProductASchema.graphql\n\n  ./productB\n    .graphqlrc\n    ProductBQuery.graphql\n    ProductBSchema.graphql\n```\nA separate GraphQL server should be instantiated for `ProductA` and `ProductB`, each with its own `.graphqlrc` file, as illustrated in the directory structure above.\n\nThe IDE server should manage the lifecycle of the GraphQL server. Ideally, the IDE server should spawn a child process for each of the GraphQL Language Service processes necessary, and gracefully exit the processes as the IDE closes. In case of errors or a sudden halt the GraphQL Language Service will close as the stream from the IDE closes.\n\n### Server Interface\n\nGraphQL Language Server uses [JSON-RPC](http://www.jsonrpc.org/specification) to communicate with the IDE servers. Microsoft's language server currently supports two communication transports: Stream (stdio) and IPC. For IPC transport, the reference guide to be used for development is [the language server protocol](https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md) documentation.\n\nFor each transport, there is a slight difference in JSON message format, especially in how the methods to be invoked are defined - below are the currently supported methods for each transport (will be updated as progress is made):\n\n|                     | Stream                       | IPC                               |\n| -------------------:|------------------------------|-----------------------------------|\n| Diagnostics         | `getDiagnostics`             | `textDocument/publishDiagnostics` |\n| Autocompletion      | `getAutocompleteSuggestions` | `textDocument/completion`         |\n| Outline             | `getOutline`                 | Not supported yet                 |\n| Go-to definition    | `getDefinition`              | Not supported yet                 |\n| File Events         | Not supported yet            | `didOpen/didClose/didSave/didChange` events |\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/graphql/graphql-language-service.git"
  },
  "scripts": {
    "build": "npm run build-js && npm run build-flow",
    "build-flow": "babel-node resources/buildFlow.js",
    "build-js": "babel-node resources/buildJs.js",
    "check": "flow check --show-all-errors",
    "check-dependencies": "node resources/checkDependencies.js",
    "lint": "eslint src packages/**/src || (printf '\\033[33mTry: \\033[7m npm run lint -- --fix \\033[0m\\n' && exit 1)",
    "prepublish": "node resources/prepublish.js",
    "pretty": "node resources/pretty.js",
    "pretty-check": "node resources/pretty.js --check",
    "t": "npm run testonly",
    "test": "npm run lint && npm run pretty-check && npm run testonly && npm run check-dependencies && npm run check",
    "testonly": "babel-node ./node_modules/.bin/_mocha $npm_package_options_mocha"
  },
  "version": "0.0.22"
}
