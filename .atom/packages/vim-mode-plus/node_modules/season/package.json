{
  "_args": [
    [
      {
        "raw": "season@^6.0.0",
        "scope": null,
        "escapedName": "season",
        "name": "season",
        "rawSpec": "^6.0.0",
        "spec": ">=6.0.0 <7.0.0",
        "type": "range"
      },
      "/tmp/d-11752-1999-ull5w9.pf4j9k9/package.tgz"
    ]
  ],
  "_from": "season@>=6.0.0 <7.0.0",
  "_id": "season@6.0.0",
  "_inCache": true,
  "_location": "/vim-mode-plus/season",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/season-6.0.0.tgz_1488799208075_0.9481908294837922"
  },
  "_npmUser": {
    "name": "as-cii",
    "email": "as-cii@github.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {
    "async": "1.5.2",
    "mkdirp": "0.5.1",
    "rimraf": "2.6.1",
    "underscore-plus": "1.6.6"
  },
  "_requested": {
    "raw": "season@^6.0.0",
    "scope": null,
    "escapedName": "season",
    "name": "season",
    "rawSpec": "^6.0.0",
    "spec": ">=6.0.0 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/vim-mode-plus"
  ],
  "_resolved": "https://registry.npmjs.org/season/-/season-6.0.0.tgz",
  "_shasum": "7ad18823907bcb275ff01b34d1aca9e2c089b986",
  "_shrinkwrap": null,
  "_spec": "season@^6.0.0",
  "_where": "/tmp/d-11752-1999-ull5w9.pf4j9k9/package.tgz",
  "bin": {
    "csonc": "./bin/csonc"
  },
  "bugs": {
    "url": "https://github.com/atom/season/issues"
  },
  "dependencies": {
    "cson-parser": "1.0.9",
    "fs-plus": "^3.0.0",
    "optimist": "~0.4.0"
  },
  "description": "CSON utilities",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.8",
    "grunt-coffeelint": "0.0.6",
    "grunt-contrib-coffee": "~0.9.0",
    "grunt-shell": "~0.2.2",
    "jasmine-focused": "1.x",
    "rimraf": "~2.1.4",
    "temp": "~0.5.0"
  },
  "directories": {},
  "dist": {
    "shasum": "7ad18823907bcb275ff01b34d1aca9e2c089b986",
    "tarball": "https://registry.npmjs.org/season/-/season-6.0.0.tgz"
  },
  "gitHead": "72934357d74578725d2dae8586c6d1286dfb57e6",
  "homepage": "http://atom.github.io/season",
  "keywords": [
    "cson",
    "json",
    "CoffeeScript"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/atom/season/raw/master/LICENSE.md"
    }
  ],
  "main": "./lib/cson.js",
  "maintainers": [
    {
      "name": "aroben",
      "email": "adam@roben.org"
    },
    {
      "name": "as-cii",
      "email": "as-cii@github.com"
    },
    {
      "name": "atom",
      "email": "nathan@github.com"
    },
    {
      "name": "benogle",
      "email": "ogle.ben@gmail.com"
    },
    {
      "name": "kevinsawicki",
      "email": "kevinsawicki@gmail.com"
    },
    {
      "name": "maxbrunsfeld",
      "email": "maxbrunsfeld@gmail.com"
    },
    {
      "name": "nathansobo",
      "email": "nathan@github.com"
    }
  ],
  "name": "season",
  "optionalDependencies": {},
  "readme": "# season - CSON Node module\n[![macOS Build Status](https://travis-ci.org/atom/season.svg?branch=master)](https://travis-ci.org/atom/season) [![Windows Build Status](https://ci.appveyor.com/api/projects/status/v3bth3ooq5q8k8lx/branch/master?svg=true)](https://ci.appveyor.com/project/Atom/season) [![Dependency Status](https://david-dm.org/atom/season.svg)](https://david-dm.org/atom/season)\n\nRead and write CSON/JSON files seamlessly.\n\n## Installing\n\n```sh\nnpm install season\n```\n\n## Building\n  * Clone the repository\n  * Run `npm install`\n  * Run `grunt` to compile the CoffeeScript code\n  * Run `grunt test` to run the specs\n\n## Compiling CSON to JSON\n\nThis module comes with a `csonc` executable that allows you to compile a CSON\nfile to JSON.\n\nTo use:\n\n```sh\nnpm install -g season\necho \"this: 'is cson'\" > file.cson\ncsonc file.cson --output file.json\ncat file.json\n{\n  \"this\": \"is cson\"\n}\n```\n\n## Docs\n\n```coffeescript\nCSON = require 'season'\n```\n\n### CSON.setCacheDir(cacheDirectory)\n\nSet the cache directory to use for storing compiled CSON files.\n\n`cacheDirectory` - Root directory path for storing compiled CSON.\n\n### CSON.stringify(object)\n\nConvert the object to a CSON string.\n\n`object` - The object to convert to CSON.\n\nReturns the CSON string representation of the given object.\n\n### CSON.readFile(objectPath, callback)\n\nRead the CSON or JSON object at the given path and return it to the callback\nonce it is read and parsed.\n\n`objectPath` - The string path to a JSON or CSON object file.\n\n`callback` - The function to call with the error or object once the path\n             is read and parsed.\n\n### CSON.readFileSync(objectPath)\n\nSynchronous version of `CSON.readFile(objectPath, callback)`.\n\nReturns the object read from the path or throws an error if reading fails.\n\n### CSON.writeFile(objectPath, object, callback)\n\nWrite the object to the given path as either JSON or CSON depending on the\npath's extension.\n\n`objectPath` - The string path to a JSON or CSON object file.\n\n`object` - The object to convert to a string and write to the path.\n\n`callback` - The function to with an error object on failures.\n\n### CSON.writeFileSync(objectPath, object)\n\nSynchronous version of `CSON.writeFile(objectPath, object, callback)`\n\n### CSON.isObjectPath(objectPath)\n\nIs the given path a valid object path?\n\nReturns `true` if the path has a `.json` or `.cson` file extension, `false`\notherwise.\n\n### CSON.resolve(objectPath)\n\nResolve the path to an existent file that has a `.json` or `.cson` extension.\n\n`objectPath` - The string path to a JSON or CSON object file with or without\n               an extension.\n\nReturns the path to an existent CSON or JSON file or `null` if none found.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/atom/season.git"
  },
  "scripts": {
    "prepublish": "grunt clean lint coffee",
    "test": "grunt test"
  },
  "version": "6.0.0"
}
