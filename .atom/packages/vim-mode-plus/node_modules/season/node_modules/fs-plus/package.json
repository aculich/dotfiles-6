{
  "_args": [
    [
      {
        "raw": "fs-plus@^3.0.0",
        "scope": null,
        "escapedName": "fs-plus",
        "name": "fs-plus",
        "rawSpec": "^3.0.0",
        "spec": ">=3.0.0 <4.0.0",
        "type": "range"
      },
      "/tmp/apm-install-dir-11752-1999-czpu3d.0ekdahh0k9/node_modules/vim-mode-plus/node_modules/season"
    ]
  ],
  "_from": "fs-plus@>=3.0.0 <4.0.0",
  "_id": "fs-plus@3.0.1",
  "_inCache": true,
  "_location": "/vim-mode-plus/season/fs-plus",
  "_nodeVersion": "6.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/fs-plus-3.0.1.tgz_1496344079704_0.5902023050002754"
  },
  "_npmUser": {
    "name": "damieng",
    "email": "damieng@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fs-plus@^3.0.0",
    "scope": null,
    "escapedName": "fs-plus",
    "name": "fs-plus",
    "rawSpec": "^3.0.0",
    "spec": ">=3.0.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/vim-mode-plus/season"
  ],
  "_resolved": "https://registry.npmjs.org/fs-plus/-/fs-plus-3.0.1.tgz",
  "_shasum": "54c169c40e2884a66d352780d18dd31f91d3a10d",
  "_shrinkwrap": null,
  "_spec": "fs-plus@^3.0.0",
  "_where": "/tmp/apm-install-dir-11752-1999-czpu3d.0ekdahh0k9/node_modules/vim-mode-plus/node_modules/season",
  "bugs": {
    "url": "https://github.com/atom/fs-plus/issues"
  },
  "dependencies": {
    "async": "^1.5.2",
    "mkdirp": "^0.5.1",
    "rimraf": "^2.5.2",
    "underscore-plus": "1.x"
  },
  "description": "node's fs with more helpers",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.8",
    "grunt-coffeelint": "0.0.6",
    "grunt-contrib-coffee": "~0.9.0",
    "grunt-shell": "~0.2.2",
    "jasmine-focused": "1.x",
    "temp": "~0.8.1"
  },
  "directories": {},
  "dist": {
    "shasum": "54c169c40e2884a66d352780d18dd31f91d3a10d",
    "tarball": "https://registry.npmjs.org/fs-plus/-/fs-plus-3.0.1.tgz"
  },
  "gitHead": "8a1fce395680395c1d95521d9e9f28c542f39a67",
  "homepage": "http://atom.github.io/fs-plus",
  "keywords": [
    "fs",
    "filesystem"
  ],
  "license": "MIT",
  "main": "./lib/fs-plus.js",
  "maintainers": [
    {
      "name": "atom-team",
      "email": "atom@github.com"
    },
    {
      "name": "damieng",
      "email": "damieng@gmail.com"
    },
    {
      "name": "iolsen",
      "email": "ian.olsen@gmail.com"
    },
    {
      "name": "as-cii",
      "email": "as-cii@github.com"
    },
    {
      "name": "lee-dohm",
      "email": "lee@lee-dohm.com"
    },
    {
      "name": "kevinsawicki",
      "email": "kevinsawicki@gmail.com"
    },
    {
      "name": "mcolyer",
      "email": "matt@colyer.name"
    },
    {
      "name": "nathansobo",
      "email": "nathan@github.com"
    },
    {
      "name": "benogle",
      "email": "ogle.ben@gmail.com"
    }
  ],
  "name": "fs-plus",
  "optionalDependencies": {},
  "readme": "# fs plus\r\n[![macOS Build Status](https://travis-ci.org/atom/fs-plus.svg?branch=master)](https://travis-ci.org/atom/fs-plus)\r\n[![Windows Build Status](https://ci.appveyor.com/api/projects/status/gf2tleqp0hdek3o3/branch/master?svg=true)](https://ci.appveyor.com/project/Atom/fs-plus/branch/master)\r\n[![Dependency Status](https://david-dm.org/atom/fs-plus.svg)](https://david-dm.org/atom/fs-plus)\r\n\r\nYet another filesystem helper based on node's [fs](http://nodejs.org/api/fs.html)\r\nmodule.  This library exports everything from node's fs module but with some\r\nextra helpers.\r\n\r\n## Using\r\n\r\n```sh\r\nnpm install fs-plus\r\n```\r\n\r\n```coffee\r\nfs = require 'fs-plus'\r\n```\r\n\r\n## Documentation\r\n\r\n### `getHomeDirectory()`\r\nReturns the absolute path to the home directory.\r\n\r\n### `absolute(relativePath)`\r\nMake the given path absolute by resolving it against the current\r\nworking directory.\r\n\r\n### Params\r\n\r\n - **String** `relativePath`: The string representing the relative path. If the\r\n   path is prefixed with '~', it will be expanded to the current user's home\r\n   directory.\r\n\r\n### Return\r\n\r\n - **String**: The absolute path or the relative path if it's unable to\r\n   determine its real path.\r\n\r\n### `normalize(pathToNormalize)`\r\nNormalize the given path treating a leading `~` segment as referring to the\r\nhome directory. This method does not query the filesystem.\r\n\r\n#### Params\r\n\r\n - **String** `pathToNormalize`: The string containing the abnormal path. If the\r\n   path is prefixed with '~', it will be expanded to the current user's home\r\n   directory.\r\n\r\n#### Return\r\n - **String** Returns a normalized path.\r\n\r\n### `tildify(pathToTildify)`\r\nConvert an absolute path to tilde path on Linux and macOS:\r\n/Users/username/dev => ~/dev\r\n\r\n#### Params\r\n\r\n - **String** `pathToTildify`: The string containing the full path.\r\n\r\n#### Return\r\n - **String** Returns a tildified path.\r\n\r\n### `getAppDataDirectory()`\r\nGet path to store application specific data.\r\n\r\n#### Return\r\n - **String** Returns the absolute path or null if platform isn't supported\r\n\r\n    - macOS: `~/Library/Application Support/`\r\n    - Windows: `%AppData%`\r\n    - Linux: `/var/lib`\r\n\r\n### `isAbsolute(pathToCheck)`\r\nIs the given path absolute?\r\n\r\n#### Params\r\n - **String** `pathToCheck`: The relative or absolute path to check.\r\n\r\n#### Return\r\n - **Bolean** Returns `true` if the path is absolute, `false` otherwise.\r\n\r\n### `existsSync(pathToCheck)`\r\nReturns `true` if a file or folder at the specified path exists.\r\n\r\n### `isDirectorySync(directoryPath)`\r\nReturns `true` if the given path exists and is a directory.\r\n\r\n### `isDirectory(directoryPath)`\r\nAsynchronously checks that the given path exists and is a directory.\r\n\r\n### `isFileSync(filePath)`\r\nReturns true if the specified path exists and is a file.\r\n\r\n### `isSymbolicLinkSync(symlinkPath)`\r\nReturns `true` if the specified path is a symbolic link.\r\n\r\n### `isSymbolicLink(symlinkPath, callback)`\r\nCalls back with `true` if the specified path is a symbolic link.\r\n\r\n### `isExecutableSync(pathToCheck)`\r\nReturns `true` if the specified path is executable.\r\n\r\n### `getSizeSync(pathToCheck)`\r\nReturns the size of the specified path.\r\n\r\n### `listSync(rootPath, extensions)`\r\nReturns an Array with the paths of the files and directories\r\ncontained within the directory path. It is not recursive.\r\n\r\n## Params\r\n - **String** `rootPath`: The absolute path to the directory to list.\r\n - **Array** `extensions`: An array of extensions to filter the results by. If none are\r\n   given, none are filtered (optional).\r\n\r\n### `list(rootPath, extensions)`\r\nAsynchronously lists the files and directories in the given path. The listing is not recursive.\r\n\r\n### `listTreeSync(rootPath)`\r\nGet all paths under the given path.\r\n\r\n#### Params\r\n - **String** `rootPath` The {String} path to start at.\r\n\r\n#### Return\r\n - **Array** Returns an array of strings under the given path.\r\n\r\n### `moveSync(source, target)`\r\nMoves the file or directory to the target synchronously.\r\n\r\n### `removeSync(pathToRemove)`\r\nRemoves the file or directory at the given path synchronously.\r\n\r\n### `writeFileSync(filePath, content, options)`\r\nOpen, write, flush, and close a file, writing the given content synchronously.\r\nIt also creates the necessary parent directories.\r\n\r\n### `writeFile(filePath, content, options, callback)`\r\nOpen, write, flush, and close a file, writing the given content\r\nasynchronously.\r\nIt also creates the necessary parent directories.\r\n\r\n### `copySync(sourcePath, destinationPath)`\r\nCopies the given path recursively and synchronously.\r\n\r\n### `makeTreeSync(directoryPath)`\r\nCreate a directory at the specified path including any missing\r\nparent directories synchronously.\r\n\r\n### `makeTree(directoryPath, callback)`\r\nCreate a directory at the specified path including any missing\r\nparent directories asynchronously.\r\n\r\n### `traverseTreeSync(rootPath, onFile, onDirectory)`\r\nRecursively walk the given path and execute the given functions\r\nsynchronously.\r\n\r\n#### Params\r\n - **String** `rootPath`: The string containing the directory to recurse into.\r\n - **Function** `onFile`: The function to execute on each file, receives a single argument\r\n   the absolute path.\r\n - **Function** `onDirectory`: The function to execute on each directory, receives a single\r\n   argument the absolute path (defaults to onFile). If this\r\n   function returns a falsy value then the directory is not\r\n   entered.\r\n\r\n### `traverseTree(rootPath, onFile, onDirectory, onDone)`\r\nPublic: Recursively walk the given path and execute the given functions\r\nasynchronously.\r\n\r\n### `md5ForPath(pathToDigest)`\r\nHashes the contents of the given file.\r\n\r\n#### Params\r\n - **String** `pathToDigest`: The string containing the absolute path.\r\n\r\n#### Return\r\n - **String** Returns a string containing the MD5 hexadecimal hash.\r\n\r\n### `resolve(loadPaths, pathToResolve, extensions)`\r\nFinds a relative path among the given array of paths.\r\n\r\n#### Params\r\n - **Array** `loadPaths`: An array of absolute and relative paths to search.\r\n - **String** `pathToResolve` The string containing the path to resolve.\r\n - **Array** `extensions` An array of extensions to pass to {resolveExtensions} in\r\n   which case pathToResolve should not contain an extension\r\n   (optional).\r\n\r\n#### Return\r\nReturns the absolute path of the file to be resolved if it's found and\r\nundefined otherwise.\r\n\r\n### `resolveOnLoadPath()`\r\nLike `.resolve` but uses node's modules paths as the load paths to\r\nsearch.\r\n\r\n### `resolveExtension(pathToResolve, extensions)`\r\nFinds the first file in the given path which matches the extension\r\nin the order given.\r\n\r\n#### Params\r\n - **String** `pathToResolve`: the string containing relative or absolute path of the\r\n   file in question without the extension or '.'.\r\n - **Array** `extensions`: the ordered array of extensions to try.\r\n\r\n#### Return\r\nReturns the absolute path of the file if it exists with any of the given\r\nextensions, otherwise it's undefined.\r\n\r\n### `isCompressedExtension(ext)`\r\nReturns true for extensions associated with compressed files.\r\n\r\n### `isImageExtension(ext)`\r\nReturns true for extensions associated with image files.\r\n\r\n### `isPdfExtension(ext)`\r\nReturns true for extensions associated with pdf files.\r\n\r\n### `isBinaryExtension(ext)`\r\nReturns true for extensions associated with binary files.\r\n\r\n### `isReadmePath(readmePath)`\r\nReturns true for files named similarily to 'README'\r\n\r\n### `isMarkdownExtension(ext)`\r\nReturns true for extensions associated with Markdown files.\r\n\r\n### `isCaseInsensitive()`\r\nIs the filesystem case insensitive?\r\nReturns `true` if case insensitive, `false` otherwise.\r\n\r\n### `isCaseSensitive()`\r\nIs the filesystem case sensitive?\r\nReturns `true` if case sensitive, `false` otherwise.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/atom/fs-plus.git"
  },
  "scripts": {
    "prepublish": "grunt prepublish",
    "test": "grunt test"
  },
  "version": "3.0.1"
}
