From: Joey Pabalinas <joeypabalinas@gmail.com>
To: Secure Systems Lab Mailing List <securesystemslab@googlegroups.com>
Cc: Justin Cappos <jcappos@nyu.edu>,
	Brendan Dolan-Gavitt <brendandg@nyu.edu>,
	Li Yiwen <detectivelyw@gmail.com>,
	Preston Moore <pkm266@nyu.edu>,
	Alan Cao <alcao758@gmail.com>,
	CrashSimulator Mailing List <crashsimulator-dev@googlegroups.com>,
	Joey Pabalinas <joeypabalinas@gmail.com>
Bcc:
Subject: [2019-10-14] Joey's Progress Report
Reply-To:
In-Reply-To: <20180704085945.472wsnw4xezjozag@hobbes.alyptik.lan>

/*
 * Joey's Progress Report
 *
 * (2018-10-14)
 */

This week I spent reading about the Python C API, and figuring out
exactly what happens when you call into Repy from inside of NaCl.

It's a lot weirder than I had thought it would be, and I'm still trying
to figure out if functions like `PyGILState_Ensure()` and `PyGILState_Release()`
are needed (the Python 2 documentation [1] recommends them when calling into
Python from C-created pthreads.

I've also been working on figuring out a way to have different threads
of execution share state, things like buffers and locks, which will be
needed to implement pipe() inside of the Repy code.

I'm also going to need to keep a list of which file descriptors refer
to pipes, since those need to be handled specially. I'm probably
going to end up storing that bookeeping information inside of the
`filedescriptortable` array, and just add an additional flag to specify
that that it refers to a pipe.

In addition, I took care of some minor cleanups in our Repy code such as
removing trailing whitespace, and have been reading about CrashSimulator
mutators.

[1] https://docs.python.org/2/c-api/init.html

* Plans For Next Week */

        - Continue to read the documentation for CrashSimulator
          mutators.
        - Continue to respond to code reviews and suggestions on
          my Lind execve() PR.
        - Begin implementing pipe() in our Repy code.

That's all for this week, thanks.

-- 
Cheers,
Joey Pabalinas

# vi:ft=mail et:
