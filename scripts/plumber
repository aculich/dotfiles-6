#!/bin/bash
#
# Use a different browser depending on url

function _mpvify() {
	notify-send "mpv: loading..." "$1"
	mpv --loop-file=inf "$@"
}

# this is definitely not parsing html with bash i promise
function _imguhr() {
	local url
	local -a display_cmd popup_cmd
	popup_cmd=(notify-send "mpv: loading...")
	display_cmd=(mpv '--loop-file=inf' '--')
	url="$(curl -L "$1" 2>/dev/null | grep -F '<meta itemprop="contentURL"')"
	# retry if no videos found
	if [[ -z "$url" ]]; then
		popup_cmd=(notify-send "feh: loading...")
		display_cmd=(feh '--insecure' '--')
		url="$(curl -L "$1" 2>/dev/null | grep -F '<meta property="og:image"')"
	fi
	url="${url##*content=\"}"
	url="${url%%\"*}"
	if ! command -v notify-send >/dev/null 2>&1; then
		popup_cmd=(:)
	fi
	"${popup_cmd[@]}" "$url"
	"${display_cmd[@]}" "$url"
}

function _plumber () {
	local pb pbalt
	pb="ptpb.pw"
	pbalt="paste.xinu.at"
	case "$1" in
	(*://localhost*/*|*://hobbes*/*|*://nibbler*/*)
		gio open "$1";;
	(*://i.imgur.com/*.gifv|*://imgur.com/*.gifv)
		_mpvify "${1/.gifv/.gif}";;
	(*.webm|*.gif|*.gifv|*.mp4|*.avi|*.mkv|*.mov|*.flv)
		_mpvify "$1";;
	(*://i.imgur.com/*)
		feh --insecure "$1";;
	(*://imgur.com/*|*://m.imgur.com/*)
		_imguhr "$1";;
	(*.jpg|*.jpeg|*.png|*.jpg[[:punct:]]*|*.jpeg[[:punct:]]*|*.png[[:punct:]]*)
		feh --insecure "$1";;
	(*://dpaste.de/*)
		gio open "$1";;
	(*://*youtube.com/*)
		_mpvify "$1";;
	(*://*youtu.be/*)
		_mpvify "$1";;
	(*://$pb/*.sh|*://$pb/*.bash|*://$pb/*.zsh|*://$pb/*/text*)
		gvim -c "setf sh" -p "${1%/*}";;
	(*://$pb/*.log|*://$pb/*.txt|*://$pb/*.conf|*://$pb/*.cfg)
		gvim -c "setf text" -p "${1%/*}";;
	(*://$pb/pb/*/bash)
		gvim -c "setf sh" -p "${1%/*}";;
	(*://$pb/*/*)
		gvim -c "setf ${1##*/}" -p "${1%/*}";;
	(*://$pb/*.*|*://$pb/\~*)
		gio open "$1";;
	(*://$pb/*)
		gvim -c "setf sh" -p "$1";;
	(*://$pbalt/*/|*://$pbalt/*/*)
		gio open "$1";;
	(*://$pbalt/*)
		gvim -c "setf sh" -p "$1";;
	(*://pastebin.com/raw*)
		gvim -c "setf sh" -p "$1";;
	(*://)
		gio open "$1";;
	(*)
		gio open "$1";;
	esac
	if (($# < 2)); then
		return 0
	fi
	shift
	_plumber "$@" >/dev/null 2>&1
}

for ((i=1; i<$#+1; i++)); do
	if [[ "${!i}" == - ]]; then
		# don't read from stdin more than once if multiple - arguments are passed
		mapfile -t argv < <(printf '%s\n' "$@" | sed '/^-$/d')
		mapfile -t stdin_argv </dev/stdin
		set -- "${argv[@]}" "${stdin_argv[@]}"
		break
	fi
done

if ((!$#)); then
	mapfile -t stdin_argv </dev/stdin
	set -- "${argv[@]}" "${stdin_argv[@]}"
fi

_plumber "$@" >/dev/null 2>&1
