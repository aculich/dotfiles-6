#!/bin/bash
#
# Use a different browser depending on url

function mpvcmd () {
	notify-send "mpv: loading..." "$1"
	mpv --loop-file=inf "$@"
}

# this is definitely not parsing html with bash i promise
function imguhr() {
	local url
	local -a display_cmd popup_cmd
	popup_cmd=(notify-send "mpv: loading...")
	display_cmd=(mpv '--loop-file=inf' '--')
	url="$(curl -L "$1" 2>/dev/null | grep -F '<meta itemprop="contentURL"')"
	# retry if no videos found
	if [[ -z "$url" ]]; then
		popup_cmd=(notify-send "feh: loading...")
		display_cmd=(feh '--insecure' '--')
		url="$(curl -L "$1" 2>/dev/null | grep -F '<meta property="og:image"')"
	fi
	url="${url##*content=\"}"
	url="${url%%\"*}"
	if ! command -v notify-send >/dev/null 2>&1; then
		popup_cmd=(:)
	fi
	"${popup_cmd[@]}" "$url"
	"${display_cmd[@]}" "$url"
}

function _plu () {
	local pb pbalt
	pb="ptpb.pw" pbalt="pb.gehidore.net"
	{ case "$1" in
	(*://nibbler*/*)
		gio open "$1" ;;
	(*://i.imgur.com/*.gifv|*://imgur.com/*.gifv)
		mpvcmd "${1/.gifv/.gif}" ;;
	(*.webm|*.gif|*.gifv|*.mp4|*.avi|*.mkv|*.mov|*.flv)
		mpvcmd "$1" ;;
	(*://i.imgur.com/*)
		feh --insecure "$1" ;;
	(*://imgur.com/*|*://m.imgur.com/*)
		imguhr "$1" ;;
	(*.jpg|*.jpeg|*.png)
		feh --insecure "$1" ;;
	(*://dpaste.de/*)
		pyb.py "$1" ;;
	(*://*youtube.com/*)
		mpvcmd "$1" ;;
	(*://*youtu.be/*)
		mpvcmd "$1" ;;
	(*://$pbalt/pb/*.sh|*://$pbalt/pb/*.bash|*://$pbalt/pb/*.zsh|*://$pbalt/pb/*/text|*://$pbalt/pb/*/bash)
		gvim -c "setf sh" -p "${1%/*}" ;;
	(*://$pbalt/pb/*/*)
		gvim -c "setf ${1##*/}" -p "${1%/*}" ;;
	(*://$pbalt/pb/*.*|*://$pbalt/pb/\~*)
		gio open "$1" ;;
	(*://$pbalt/pb/*)
		gvim -c "setf sh" -p "${1}" ;;
	(*://$pb/*.sh|*://$pb/*.bash|*://$pb/*.zsh|*://$pb/*/text*|*://$pb/*/bash)
		gvim -c "setf sh" -p "${1%/*}" ;;
	(*://$pb/*/*)
		gvim -c "setf ${1##*/}" -p "${1%/*}" ;;
	(*://$pb/*.*|*://$pb/\~*)
		gio open "$1" ;;
	(*://$pb/*)
		gvim -c "setf sh" -p "${1}" ;;
	(*://pastebin.com/raw*)
		gvim -c "setf sh" -p "$1" ;;
	(*://)
		gio open "$1" ;;
	(*)
		gio open "$1" ;;
	esac; } >/dev/null 2>&1
	[[ -z "$2" ]] && return 0
	shift
	_plu "$@"
}

if [[ -z "$*" ]]; then
	declare -a args
	read -ra args
	set -- "${args[@]}"
	unset args
fi

_plu "$@"
